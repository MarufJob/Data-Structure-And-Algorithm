//Time Limit Exceeded

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {

        int len = nums.size();
        // cout<<nums.size()<<endl;
        // cout<<nums.size()-1<<endl;
        for(int i=0; i<len-1; i++)
        {
            for(int j=i+1; j<len; j++)
            {
                if(nums[i]==nums[j])
                {
                    //cout<<i<<" = "<<nums[i]<<endl;
                    //cout<<j<<" = "<<nums[j]<<endl;
                    return true;
                }
            }
        }
        return false;
    }
};




//Accepted

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        
        int len = nums.size();
        sort(nums.begin(),nums.end());
        
        for(int i=0; i<len-1; i++)
        {
            if(nums[i]==nums[i+1])
            {  
                return true;
            }
        }
        return false;
    }
};





class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        
        set<int>setNum;
        int len = nums.size();
        for(int i = 0; i<len; i++)
         {
            setNum.insert(nums[i]);
         }
         
        if(setNum.size() < len )
        return true;
        
        return false;
    }
};





class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {

        int len = nums.size();
        // unordered_map<int,int>mapNum; //better than map
        map<int,int>mapNum;
        for(int i=0; i<len; i++)
        {
            // mapNum[nums[i]]+=1;
            mapNum[nums[i]]++;
        }

        for(auto iteration: mapNum)
        {
            //cout<<iteration.first<<" = "<<iteration.second<<endl;
            if(iteration.second>1) return true;
        }
        return false;
    }
};
