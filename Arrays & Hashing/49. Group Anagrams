class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>>mapStr;

        for(auto x : strs)
        {
            string word = x;
            sort(word.begin(),word.end());
            mapStr[word].push_back(x);
        }

        vector<vector<string>>ans;
        for(auto x : mapStr)
        {
            ans.push_back(x.second);
        }
        return ans;
    }
};




class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<map<char,int>, vector<string>>mapStr;

        for(string str : strs)
        {
            map<char, int> tempMap;
            for(int i=0; i<str.length(); i++)
            {
                if(tempMap.find(str[i]) != tempMap.end())
                {
                    int x = tempMap[str[i]];
                    tempMap.insert({str[i], ++x});
                }
                
                else
                {
                    tempMap.insert({str[i], 1);
                }
            }

            if(mp.find(tempMap) != mp.end() ) 
            {
                mp[tempMap].push_back(str);
            }

            else
            {
                vector<string> tempStr;
                tempStr.push_back(str);
                mp.insert({tempMap, tempStr});
            }
        }
        vector<vector<string>>anagrams;
        for(auto p : mp)
    }
};
